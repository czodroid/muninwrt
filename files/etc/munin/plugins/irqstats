#! /usr/bin/env perl
#
# Filename: irqstats
# Author: Olivier Sirol <czo@free.fr>
# License: GPL-2.0 (http://www.gnu.org/copyleft)
# File Created: Dec 2014
# Last Modified: Sunday 07 July 2024, 11:11
# $Id: irqstats,v 1.8 2024/07/06 23:05:11 czo Exp $
# Edit Time: 17:14:39
# Description:
#
#           Munin plugin
#           monitor individual interrupts
#
# Copyright: (C) 2014-2024 Olivier Sirol <czo@free.fr>

# use strict;
use warnings;

##===================================================================##
## Function

sub clean_fieldname ($) {
    my $name = shift;
    $name =~ s/^[^A-Za-z_]+/_/;
    $name =~ s/[^A-Za-z0-9_]/_/g;
    $name = "__root" if $name eq "root";
    return $name;
}

##===================================================================##
## Main

$file = '/proc/interrupts';
open( FILE, "<$file" ) or die "ERROR: can't read $file: $!\n";
$cpus = scalar( split( ' ', <FILE> ) );
## print "cpus: $cpus\n";

while (<FILE>) {
    chomp;
    s/^\s+//;
    s/^(\w+):/$1/;
    @F = split(/\s+/);

    # use Data::Dumper;
    # $Data::Dumper::Sortkeys = 1;
    # print Dumper( \@F );

    if ( $F[0] !~ /^ERR|^MIS/i ) {
        $irq          = $F[0];
        $i{$irq}{irq} = clean_fieldname( "i" . $F[0] );
        $sum          = 0;
        map { $sum += $_ } @F[ 1 .. $cpus ];
        $i{$irq}{count} = $sum;
        if ( $irq =~ /^\d+/ ) {
            $i{$irq}{label} = "$F[-1] [$F[0]]";
            $i{$irq}{info}  = "Interrupt $F[0], for device(s): $F[-1]";
        } else {
            $i{$irq}{label} = join( " ", @F[ $cpus + 1 .. $#F ] );
            if ( $irq =~ /NMI/i ) {
                $i{$irq}{info} = "Nonmaskable interrupt. Either 0 or quite high. If it's normaly 0 then just one NMI will often mark some hardware failure.";
            } elsif ( $irq =~ /LOC/i ) {
                $i{$irq}{info} = "Local (pr. CPU core) APIC timer interrupt.  Until 2.6.21 normaly 250 or 1000 pr second. On modern 'tickless' kernels it more or less reflects how busy the machine is.";
            } else {
                $i{$irq}{info} = "Interrupt $F[0] ($i{$irq}{label})";
            }
        }
    }
}
close FILE;

if ( $ARGV[0] and $ARGV[0] eq "config" ) {
    print <<EOT;
graph_title Individual interrupts
graph_args --base 1000 --logarithmic
graph_vlabel interrupts / \${graph_period}
graph_category system
graph_info Shows the number of different IRQs received by the kernel.  High disk or network traffic can cause a high number of interrupts (with good hardware and drivers this will be less so). Sudden high interrupt activity with no associated higher system activity is not normal.
EOT
foreach my $irq ( sort keys %i) {
        print "$i{$irq}{irq}.label $i{$irq}{label}\n";
        print "$i{$irq}{irq}.info $i{$irq}{info}\n";
        print "$i{$irq}{irq}.type DERIVE\n";
        print "$i{$irq}{irq}.min 0\n";
    }
    exit 0;
}

# foreach my $irq ( sort { no warnings; length($a) <=> length($b) || $a <=> $b || $a cmp $b } keys %i ) {
# foreach my $irq ( sort { { %i } ->{$a}->{label} cmp {%i}->{$b}->{label} } keys %i) {
foreach my $irq ( sort keys %i) {
    print "$i{$irq}{irq}.value $i{$irq}{count}\n";
}

__END__
