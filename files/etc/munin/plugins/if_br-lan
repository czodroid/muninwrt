#! /usr/bin/env perl
#
# Filename: if_br-lan
# Author: Olivier Sirol <czo@free.fr>
# License: GPL-2.0 (http://www.gnu.org/copyleft)
# File Created: 03 Dec 2019
# Last Modified: Thursday 13 June 2024, 12:33
# $Id: if_br-lan,v 1.4 2024/06/12 19:56:41 czo Exp $
# Edit Time: 8:37:15
# Description:
#
#           Munin plugin for if_[wildcard]
#           monitor traffic on network interfaces
#
# Copyright: (C) 2019-2024 Olivier Sirol <czo@free.fr>

# use strict;
use warnings;

##===================================================================##
## Main

if ( $0 =~ /^(?:|.*\/)if_([^_]+)$/ ) {
    $INTERFACE = $1;
}

if ( $ARGV[0] and $ARGV[0] eq "config" ) {
    print <<EOT;
graph_order down up
graph_title Interface $INTERFACE traffic
graph_args --base 1000
graph_vlabel bits in (-) / out (+) per \${graph_period}
graph_category network
graph_info This graph shows the traffic of the $INTERFACE network interface. Please note that the traffic is shown in bits per second, not bytes. IMPORTANT: Since the data source for this plugin use 32bit counters, this plugin is really unreliable and unsuitable for most 100Mb (or faster) interfaces, where bursts are expected to exceed 50Mbps. This means that this plugin is usuitable for most production environments. To avoid this problem, use the ip_ plugin instead.
down.label received
down.type DERIVE
down.min 0
down.graph no
down.cdef down,8,*
up.label bps
up.type DERIVE
up.min 0
up.negative down
up.cdef up,8,*
EOT

    foreach (qx(ethtool $INTERFACE 2>/dev/null)) {
        chomp;
        if (/^\s*Speed:\s*(\d+)+Mb\/s/) {
            $max = $1;
            print "up.info $max  Mb/s\n";
            print "down.info $max Mb/s\n";
            $max = $max * 1024 * 1024;
            print "up.max $max\n";
            print "down.max $max\n";
        }
    }

    exit 0;
}

$down = 'U';
$up   = 'U';
$file = '/proc/net/dev';
open( FILE, "<$file" ) or die "ERROR: can't read $file: $!\n";
while (<FILE>) {
    chomp;
    if (/^\s*$INTERFACE:\s*(.*)$/) {
        $interface = $1;
        @valuesif  = split( '\s+', $interface );
        $down      = $valuesif[ 1 - 1 ];
        $up        = $valuesif[ 9 - 1 ];
    }
}
close FILE;

print "down.value $down\n";
print "up.value $up\n";

__END__
