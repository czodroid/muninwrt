#! /usr/bin/env perl
#
# Filename: wireless
# Author: Olivier Sirol <czo@free.fr>
# License: GPL-2.0 (http://www.gnu.org/copyleft)
# File Created: 03 Dec 2019
# Last Modified: Wednesday 19 June 2024, 17:44
# $Id: if_eth0,v 1.5 2024/06/12 14:43:40 czo Exp $
# Edit Time: 14:13:09
# Description:
#
#           Munin plugin for if_[wildcard]
#           monitor traffic on network interfaces
#
# it seems that iwinfo now displays 'Tx-Power:' and 'Signal:'
# for all interfaces, not just the radio.
#
# oWRT 21.02:
#   wlan0
#   wlan0-1
# oWRT 23.05:
#   phy0-ap0
#   phy0-ap1
#
# Copyright: (C) 2019-2024 Olivier Sirol <czo@free.fr>

# use strict;
use warnings;

##===================================================================##
## Function

sub clean_fieldname ($) {
    my $name = shift;
    $name =~ s/^[^A-Za-z_]+/_/;
    $name =~ s/[^A-Za-z0-9_]/_/g;
    $name = "__root" if $name eq "root";
    return $name;
}

##===================================================================##
## Main

qx(sh -c 'command -v iwinfo') or die "ERROR: `iwinfo' not found\n";

# foreach (qx(cat w)) {
foreach (qx(iwinfo 2>/dev/null)) {
    chomp;
    if (/^([a-zA-Z][^\s]*)\s+/) {
        $interface            = $1;
        $name                 = clean_fieldname($interface);
        $iw{$name}{interface} = $interface;
    }
    if (/^\s+Bit Rate: (unknown|[0-9.]+ MBit\/s)/) {
        $bitrate = $1;
        $bitrate =~ s/ MBit\/s//;
        $bitrate =~ s/unknown/U/;
        $iw{$name}{bitrate} = $bitrate;
    }
    if (/^\s+Tx-Power: ([0-9]+) dBm  Link Quality: (unknown|[0-9\/]+)/) {

        $power   = $1;
        $quality = $2;

        if ( $quality =~ /unknown/ ) {
            $quality = 'U';
        } else {
            $quality = eval($2) * 100;
        }

        $iw{$name}{power}   = $power;
        $iw{$name}{quality} = $quality;
    }
    if (/^\s+Signal: (unknown|[-0-9]+ dBm)\s+Noise: ([-0-9]+) dBm/) {

        $signal = $1;
        $noise  = $2;

        $signal =~ s/ dBm//;
        $signal =~ s/unknown/U/;

        $iw{$name}{signal} = $signal;
        $iw{$name}{noise}  = $noise;
    }
}

# use Data::Dumper;
# $Data::Dumper::Sortkeys = 1;
# print Dumper( \%iw );
# exit 0;

if ( $ARGV[0] and $ARGV[0] eq "config" ) {

    foreach $i ( sort keys %iw ) {
        print <<EOT;
multigraph wireless_$i
graph_title WLAN $i AP Statistics
graph_vlabel Strength (dBm)
graph_category network
graph_scale no
signal.label Signal
noise.label Noise

multigraph wireless_associations_$i
graph_title WLAN $i associations
graph_vlabel Clients
graph_args --lower-limit 0
graph_category network
graph_scale no
clients.label Clients

multigraph wireless_bitrate_$i
graph_title WLAN $i bitrate
graph_vlabel Bitrate (MBit/s)
graph_args --lower-limit 0
graph_category network
graph_scale no
bitrate.label Bitrate

multigraph wireless_quality_$i
graph_title WLAN $i quality & power
graph_vlabel quality & power
graph_args --lower-limit 0
graph_category network
graph_scale no
quality.label Quality
power.label Power

EOT
    }
    exit 0;
}

foreach $i ( sort keys %iw ) {
    $clients = qx(iwinfo "$iw{$i}{interface}" assoc | grep -c SNR);
    chomp $clients;
    $iw{$i}{clients} = $clients;
}

foreach $i ( sort keys %iw ) {
    print <<EOT;
multigraph wireless_$i
signal.label $iw{$i}{signal}
noise.value $iw{$i}{noise}

multigraph wireless_associations_$i
clients.value $iw{$i}{clients}

multigraph wireless_bitrate_$i
bitrate.value $iw{$i}{bitrate}

multigraph wireless_quality_$i
quality.value $iw{$i}{quality}
power.value $iw{$i}{power}

EOT

}

__END__
